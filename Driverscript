 We r initializing from Driver.script file

@Before

           public final void initialize() throws IOException {

 

             try {

              // controller = new Xls_Reader(System.getProperty("user.dir") + "\\src\\config\\Controller_VF_DEV_SmokeTest_old5.9.3.xlsx");

                //controller = new Xls_Reader(System.getProperty("user.dir") + "\\src\\config\\Final_SmokeTest_5.9.3.xlsx");

                controller = new Xls_Reader(System.getProperty("user.dir") + "\\src\\config\\DOcontroller.xlsx");

                TestData = new Xls_Reader(System.getProperty("user.dir") + "\\src\\config\\DOTestData.xlsx");

               //TestData = new Xls_Reader(System.getProperty("user.dir") + "\\src\\config\\TestData_VF_DEV_SmokeTest_old5.9.3.xl
			   
			    public Xls_Reader(String path) {

             

              this.path=path;

             

              try {

                     fis = new FileInputStream(path);

                     workbook = new XSSFWorkbook(fis);

                     sheet = workbook.getSheetAt(0);

                     fis.close();

              } catch (Exception e) {

                     // TODO Auto-generated catch block

                     System.out.println("Errror=----------------");

                     e.printStackTrace();

              }

             

       }

       // returns the row count in a sheet

       public int getRowCount(String sheetName){

              int index = workbook.getSheetIndex(sheetName);

              if(index==-1)

                     return 0;

              else{

              sheet = workbook.getSheetAt(index);

              int number=sheet.getLastRowNum()+1;

             

              return number;

              }

             

       }

      

       // returns the data from a cell

       public String getCellData(String sheetName,String colName,int rowNum){

              try{

                     if(rowNum <=0)

                           return "";

             

              int index = workbook.getSheetIndex(sheetName);

              int col_Num=-1;

              if(index==-1)

                     return "";

             

              sheet = workbook.getSheetAt(index);

              row=sheet.getRow(0);

              for(int i=0;i<row.getLastCellNum();i++){

                     //System.out.println(row.getCell(i).getStringCellValue().trim());

                     if(row.getCell(i).getStringCellValue().trim().equals(colName.trim()))

                           col_Num=i;

              }

              if(col_Num==-1)

                     return "";

             

              sheet = workbook.getSheetAt(index);

              row = sheet.getRow(rowNum-1);

              if(row==null)

                     return "";

              cell = row.getCell(col_Num);

             

              if(cell==null)

                     return "";

              //System.out.println(cell.getCellType());

              if(cell.getCellType()==Cell.CELL_TYPE_STRING)

                       return cell.getStringCellValue();

              else if(cell.getCellType()==Cell.CELL_TYPE_NUMERIC || cell.getCellType()==Cell.CELL_TYPE_FORMULA ){

                      

                       String cellText  = String.valueOf(cell.getNumericCellValue());

                       if (HSSFDateUtil.isCellDateFormatted(cell)) {

                          

                         // format in form of M/D/YY

                             double d = cell.getNumericCellValue();

 

                             Calendar cal =Calendar.getInstance();

                             cal.setTime(HSSFDateUtil.getJavaDate(d));

                          cellText =

                           (String.valueOf(cal.get(Calendar.YEAR))).substring(2);

                         cellText = cal.get(Calendar.DAY_OF_MONTH) + "/" +

                                    cal.get(Calendar.MONTH)+1 + "/" +

                                    cellText;

                        

                         //System.out.println(cellText);

 

                       }

 

                      

                       

                       return cellText;

                }else if(cell.getCellType()==Cell.CELL_TYPE_BLANK)

                    return "";

                else

                       return String.valueOf(cell.getBooleanCellValue());

             

              }

              catch(Exception e){

                    

                     e.printStackTrace();

                     return "row "+rowNum+" or column "+colName +" does not exist in xls";

              }

             

       }

      

       // returns the data from a cell

       public String getCellData(String sheetName,int colNum,int rowNum){

              try{

                     if(rowNum <=0)

                           return "";

             

              int index = workbook.getSheetIndex(sheetName);

 

              if(index==-1)

                     return "";

             

      

              sheet = workbook.getSheetAt(index);

              row = sheet.getRow(rowNum-1);

              if(row==null)

                     return "";

              cell = row.getCell(colNum);

              if(cell==null)

                     return "";

             

         if(cell.getCellType()==Cell.CELL_TYPE_STRING)

                return cell.getStringCellValue();

         else if(cell.getCellType()==Cell.CELL_TYPE_NUMERIC || cell.getCellType()==Cell.CELL_TYPE_FORMULA ){

               

                String cellText  = String.valueOf(cell.getNumericCellValue());

                if (HSSFDateUtil.isCellDateFormatted(cell)) {

                    

                  // format in form of M/D/YY

                       double d = cell.getNumericCellValue();

 

                       Calendar cal =Calendar.getInstance();

                       cal.setTime(HSSFDateUtil.getJavaDate(d));

                   cellText = (String.valueOf(cal.get(Calendar.YEAR))).substring(2);

                  cellText = cal.get(Calendar.MONTH)+1 + "/" +

                             cal.get(Calendar.DAY_OF_MONTH) + "/" +

                             cellText;

            

                 // System.out.println(cellText);

 

                }

 

               

                

                return cellText;

         }else if(cell.getCellType()==Cell.CELL_TYPE_BLANK)

             return "";

         else

                return String.valueOf(cell.getBooleanCellValue());

              }

              catch(Exception e){

                    

                     e.printStackTrace();

                     return "row "+rowNum+" or column "+colNum +" does not exist  in xls";

              }

       }

      

       // returns true if data is set successfully else false

       public boolean setCellData(String sheetName,String colName,int rowNum, String data){

              try{

              fis = new FileInputStream(path);

              workbook = new XSSFWorkbook(fis);

 

              if(rowNum<=0)

                     return false;

             

              int index = workbook.getSheetIndex(sheetName);

              int colNum=-1;

              if(index==-1)

                     return false;

             

             

              sheet = workbook.getSheetAt(index);

             

 

              row=sheet.getRow(0);

              for(int i=0;i<row.getLastCellNum();i++){

                     //System.out.println(row.getCell(i).getStringCellValue().trim());

                     if(row.getCell(i).getStringCellValue().trim().equals(colName))

                           colNum=i;

              }

              if(colNum==-1)

                     return false;

 

              sheet.autoSizeColumn(colNum);

              row = sheet.getRow(rowNum-1);

              if (row == null)

                     row = sheet.createRow(rowNum-1);

             

              cell = row.getCell(colNum);     

              if (cell == null)

               cell = row.createCell(colNum);

 

           // cell style

           //CellStyle cs = workbook.createCellStyle();

           //cs.setWrapText(true);

           //cell.setCellStyle(cs);

           cell.setCellValue(data);

 

           fileOut = new FileOutputStream(path);

 

              workbook.write(fileOut);

 

           fileOut.close();     

 

              }

              catch(Exception e){

                     e.printStackTrace();

                     return false;

              }

              return true;

       }

      

      

       // returns true if data is set successfully else false

       public boolean setCellData(String sheetName,String colName,int rowNum, String data,String url){

              //System.out.println("setCellData setCellData******************");

              try{

              fis = new FileInputStream(path);

              workbook = new XSSFWorkbook(fis);

 

              if(rowNum<=0)

                     return false;

             

              int index = workbook.getSheetIndex(sheetName);

              int colNum=-1;

              if(index==-1)

                     return false;

             

             

              sheet = workbook.getSheetAt(index);

              //System.out.println("A");

              row=sheet.getRow(0);

              for(int i=0;i<row.getLastCellNum();i++){

                     //System.out.println(row.getCell(i).getStringCellValue().trim());

                     if(row.getCell(i).getStringCellValue().trim().equalsIgnoreCase(colName))

                           colNum=i;

              }

             

              if(colNum==-1)

                     return false;

              sheet.autoSizeColumn(colNum); //ashish

              row = sheet.getRow(rowNum-1);

              if (row == null)

                     row = sheet.createRow(rowNum-1);

             

              cell = row.getCell(colNum);     

              if (cell == null)

               cell = row.createCell(colNum);

                    

           cell.setCellValue(data);

           XSSFCreationHelper createHelper = workbook.getCreationHelper();

 

           //cell style for hyperlinks

           //by default hypelrinks are blue and underlined

           CellStyle hlink_style = workbook.createCellStyle();

           XSSFFont hlink_font = workbook.createFont();

           hlink_font.setUnderline(XSSFFont.U_SINGLE);

           hlink_font.setColor(IndexedColors.BLUE.getIndex());

           hlink_style.setFont(hlink_font);

           //hlink_style.setWrapText(true);

 

           XSSFHyperlink link = createHelper.createHyperlink(XSSFHyperlink.LINK_FILE);

           link.setAddress(url);

           cell.setHyperlink(link);

           cell.setCellStyle(hlink_style);

            

           fileOut = new FileOutputStream(path);

              workbook.write(fileOut);

 

           fileOut.close();     

 

              }

              catch(Exception e){

                     e.printStackTrace();

                     return false;

              }

              return true;

       }

      

      

      

       // returns true if sheet is created successfully else false

       public boolean addSheet(String  sheetname){         

             

              FileOutputStream fileOut;

              try {

                     workbook.createSheet(sheetname);      

                     fileOut = new FileOutputStream(path);

                     workbook.write(fileOut);

                   fileOut.close();               

              } catch (Exception e) {                

                     e.printStackTrace();

                     return false;

              }

              return true;

       }

      

       // returns true if sheet is removed successfully else false if sheet does not exist

       public boolean removeSheet(String sheetName){       

              int index = workbook.getSheetIndex(sheetName);

              if(index==-1)

                     return false;

             

              FileOutputStream fileOut;

              try {

                     workbook.removeSheetAt(index);

                     fileOut = new FileOutputStream(path);

                     workbook.write(fileOut);

                  fileOut.close();                

              } catch (Exception e) {                

                     e.printStackTrace();

                     return false;

              }

              return true;

       }

 

 

 

 

 

 

To run

 

   @Before

           public final void initialize() throws IOException {

 

             try {

              // controller = new Xls_Reader(System.getProperty("user.dir") + "\\src\\config\\Controller_VF_DEV_SmokeTest_old5.9.3.xlsx");

                //controller = new Xls_Reader(System.getProperty("user.dir") + "\\src\\config\\Final_SmokeTest_5.9.3.xlsx");

                controller = new Xls_Reader(System.getProperty("user.dir") + "\\src\\config\\DOcontroller.xlsx");

                TestData = new Xls_Reader(System.getProperty("user.dir") + "\\src\\config\\DOTestData.xlsx");

               //TestData = new Xls_Reader(System.getProperty("user.dir") + "\\src\\config\\TestData_VF_DEV_SmokeTest_old5.9.3.xlsx");

                 //TestData = new Xls_Reader(System.getProperty("user.dir") + "\\src\\config\\TestData_VF_DEV_SmokeTest_5.9.3.xlsx");

                //controller = new Xls_Reader(System.getProperty("user.dir") + "\\src\\config\\Colt123.xlsx");

               // TestData = new Xls_Reader(System.getProperty("user.dir") + "\\src\\config\\colt123testdata.xlsx");

              }

              catch(Throwable t){

                 t.printStackTrace();

              }

           }

             

       @Test

       public final void testApp()

       {

             

              String startTime = null;

              ReportUtil.startSuite("Suite1");

              for(int rows =2;rows<=controller.getRowCount("Suite1");rows++){ //for the suite

                     currentTest = controller.getCellData("Suite1", "TCID", rows);

                     currentTitle = controller.getCellData("Suite1", "Title", rows);

                     if(controller.getCellData("Suite1", "Runmode", rows).equalsIgnoreCase("Y")){

                          

                           System.out.println(rows +" Execute Test "+currentTest);

                           int totalSets = TestData.getRowCount(currentTest);

                           System.out.println("rows in testdata "+totalSets);

                           if(totalSets<=1){

                                  totalSets = 2; //run at least once

                           }

                           for( testRepeat=2;testRepeat<=totalSets;testRepeat++) //run any number of rows TestData has

                           {

                                  startTime = TestUtil.now("dd.MMMMM.yyyy hh.mm.ss aaa");

                                  for(int tsid = 2;tsid<=controller.getRowCount(currentTest);tsid++) //run for each step

                                  {                         

                                         description = controller.getCellData(currentTest, "Decription", tsid);

                                         keyword = controller.getCellData(currentTest, "Keyword", tsid);

                                         object = controller.getCellData(currentTest, "Object", tsid);

                                         dataColumnName = controller.getCellData(currentTest, "Data_Column_Name", tsid);

                                         if(keyword.trim()!="")

                                         {

                                                try

                                                {

                                                       /*if (keyword == "verifyRecordWasDeleted")

                                                       {

                                                       String test = "test";

                                                       }*/

                                                       //Keywords.navigate();

                                                       //return;

                                                       String tsidCol = controller.getCellData(currentTest, "TSID", tsid);

                                                       System.out.println("TSID: " + tsidCol + " - " + keyword);

                                                       Method method = Keywords.class.getMethod(keyword);      //get the info of the method

                                                       System.out.println("method = "+method.toString());

                                                       String result = (String) method.invoke(method);     //call method by reflexion

                                                       //objects.clear();

                                                       System.out.println("-------Result "+result);

                                                       System.out.println("--------------END of TEST STEP---------------");                                                     

                                                       String fileName = currentTest + "ScreenShot" + tsid + ".jpg";                                                                                                                              

                                                       if(result != null)

                                                       {

                                                              if(result.equals("Pass"))

                                                              {                                

                                                                     ReportUtil.addKeyword(description, keyword, result, null);

                                                                     //TestUtil.takeScreenShot(subDir + "\\" + fileName);

                                                              }

                                               

                                             if (result.startsWith("Fail")) {

                                               System.out.println("Screen shot path:" + subDir + "\\" + fileName);

                                                 TestUtil.takeScreenShot(subDir + "\\" + fileName);

                                                 ReportUtil.addKeyword(description, keyword, result, fileName);

                                                 testStatus = result;

                                                 driver.quit();

                                                                     driver = null;                                                                                                                                      

                                                 break;

                                             }

                                                       }

                                                }                                                     

                                                catch(Throwable t)

                                                {

                                                      

                                                       System.out.println("error came");

                                                       System.out.println(keyword);

                                                       t.printStackTrace();

                                                }

                                     }

                                  }

                                 

                                  if(testStatus==null){

                                        

                                         testStatus = "Pass";

                                  }

                                  System.out.println("currentTest "+testStatus);

                                  System.out.println("************END of TEST CASE***************");

                       ReportUtil.addTestCase(currentTest, currentTitle, startTime,

                                  TestUtil.now("dd.MMMMM.yyyy hh.mm.ss aaa"),

                                  testStatus.substring(0, splitTestStatus));

